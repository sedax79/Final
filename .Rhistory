# Calcular la matriz de correlación (var continuas)
cor_matrix <- cor(BD_final[, c("Precio_log", "AREA_CONST", "RECAMARAS", "BANOS", "Edad_inmue", "Distance", "I_A", "CPV_Prop_s")], use = "complete.obs")
ggcorrplot(cor_matrix, hc.order = TRUE, type = "lower", lab = TRUE, colors = c("red", "white", "blue"))
str(BD_final)
#Seleccion final de variables
BD_modelo <- BD_final [c("ID","precio","Precio_log","AREA_CONST","RECAMARAS","BANOS","Edad_inmue","Jardin","Cisterna","Seguridad","Alberca","Lavanderí","Terraza","Gimnasio","Cuarto.de","Chimenea","Aire.acond","Elevador","CPV_Prop_s","Distance","I_A","tipo_vivienda")]
str(BD_modelo)
BD_modelo <- BD_modelo %>%
mutate(
across(c(precio, Precio_log,AREA_CONST, RECAMARAS, BANOS, Edad_inmue), as.numeric),
across(c(Jardin, Cisterna, Seguridad, Alberca, Lavanderí, Terraza, Gimnasio, Cuarto.de, Chimenea, Aire.acond, Elevador, tipo_vivienda, I_A), as.factor)
)
str(BD_modelo)
# Realizar la regresión lineal precio log
modelo <- lm(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = BD_modelo)
summary(modelo)
#Realizar la regresión lineal precio nominal
modelo1 <- lm(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = BD_modelo)
summary(modelo1)
# Calcular el VIF
vif(modelo)
library(car)
# Calcular el VIF
vif(modelo)
vif(modelo1)
# Diagnóstico de residuos
par(mfrow = c(2, 2))  # Disposición para 4 gráficos
plot(modelo)  # Gráficos de diagnóstico
plot(modelo1)  # Gráficos de diagnóstico
library(broom)
#__________Mostrar y comparar modelos_________#
lista_modelos <- list(
"Modelo lineal Log" = modelo,
"Modelo lineal $" = modelo1
)
resultados_modelos <- purrr::map_dfr(lista_modelos, tidy, .id = "Modelo")
resumen_modelos <- purrr::map_dfr(lista_modelos, glance, .id = "Modelo")
View(resumen_modelos)
write.csv(resultados_modelos, "C:/Mineria de datos/Final/BD/resultados_coeficientes.csv", row.names = FALSE)
write.csv(resumen_modelos, "C:/Mineria de datos/Final/BD/resultados_resumen.csv", row.names = FALSE)
library(caret)
index <- createDataPartition(BD_modelo$precio, p = 0.7, list = FALSE)
data_train <- BD_modelo[index, ]  # 70% de los datos
data_test <- BD_modelo[-index, ]  # 30% restantes
#Modelo simple
modelo_pred <- lm(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train)
summary(modelo_pred)
#Modelo mejorado
modelo_pred1 <- lm(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I(Distance^2) + I_A + tipo_vivienda, data = data_train)
summary(modelo_pred1)
#Modelo mejorado (solo cuadrado)
modelo_pred2 <- lm(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + I(Distance^2) + I_A + tipo_vivienda, data = data_train)
summary(modelo_pred2)
index1 <- createDataPartition(BD_modelo$Precio_log, p = 0.7, list = FALSE)
data_train1 <- BD_modelo[index1, ]  # 70% de los datos
data_test1 <- BD_modelo[-index1, ]  # 30% restantes
index1 <- createDataPartition(BD_modelo$Precio_log, p = 0.7, list = FALSE)
data_train1 <- BD_modelo[index1, ]  # 70% de los datos
data_test1 <- BD_modelo[-index1, ]  # 30% restantes
#Modelo simple
modelo_pred3 <- lm(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train1)
summary(modelo_pred3)
#Modelo mejorado
modelo_pred4 <- lm(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I(Distance^2) + I_A + tipo_vivienda, data = data_train1)
summary(modelo_pred4)
#Modelo mejorado (solo cuadrado)
modelo_pred5 <- lm(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + I(Distance^2) + I_A + tipo_vivienda, data = data_train1)
summary(modelo_pred5)
#Modelo simple
modelo_pred1 <- lm(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train)
summary(modelo_pred)
index1 <- createDataPartition(BD_modelo$Precio_log, p = 0.7, list = FALSE)
data_train1 <- BD_modelo[index1, ]  # 70% de los datos
data_test1 <- BD_modelo[-index1, ]  # 30% restantes
#Modelo simple
modelo_pred2 <- lm(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train1)
summary(modelo_pred3)
# Predicciones en el conjunto de prueba
predicciones <- predict(modelo_pred, newdata = data_test)
# Calcular el RMSE
rmse <- sqrt(mean((data_test$precio - predicciones)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test$precio, predicciones)^2
cat("R²:", r2, "\n")
# Predicciones en el conjunto de prueba
predicciones <- predict(modelo_pred1, newdata = data_test)
# Calcular el RMSE
rmse <- sqrt(mean((data_test$precio - predicciones)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test$precio, predicciones)^2
cat("R²:", r2, "\n")
# Predicciones en el conjunto de prueba
predicciones1 <- predict(modelo_pred2, newdata = data_test1)
# Calcular el RMSE
rmse <- sqrt(mean((data_test1$Precio_log - predicciones1)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test1$Precio_log, predicciones1)^2
cat("R²:", r2, "\n")
# Calcular el VIF
vif(modelo_pred1)
vif(modelo_pred2)
par(mfrow = c(2, 2))  # Disposición para 4 gráficos
#Precio $
plot(modelo_pred1)  # Gráficos de diagnóstico
#Precio Log
plot(modelo_pred2)  # Gráficos de diagnóstico
ggplot(data_test, aes(x = precio, y = predicciones)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
ggplot(data_test1, aes(x = Precio_log, y = predicciones1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
#Guardar Residuos
residuoslm <- residuals(modelo_pred1)
residuoslm1 <- residuals(modelo_pred2)
plot(fitted(modelo_pred1), residuos,
main = "Residuos vs Predicciones",
xlab = "Valores Ajustados",
ylab = "Residuos",
pch = 20)
plot(fitted(modelo_pred1), residuos1,
main = "Residuos vs Predicciones",
xlab = "Valores Ajustados",
ylab = "Residuos",
pch = 20)
plot(fitted(modelo_pred1), residuoslm,
main = "Residuos vs Predicciones",
xlab = "Valores Ajustados",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
#Precio $
plot(modelo_pred1)  # Gráficos de diagnóstico
par(mfrow = c(2, 2))  # Disposición para 4 gráficos
#Precio $
plot(modelo_pred1)  # Gráficos de diagnóstico
#Precio Log
plot(modelo_pred2)  # Gráficos de diagnóstico
hist(residuoslm, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
hist1(residuoslm1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
hist(residuoslm1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
ggplot(data_test, aes(x = precio, y = predicciones)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
library(ggplot2)
ggplot(data_test1, aes(x = Precio_log, y = predicciones1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
library(readr)
library(Hmisc)
library(corrplot)
library(plyr)
library(randomForest)
library(rpart)
library(rpart.plot)
library(MASS)
library(stats)
library(RWeka)
library(neuralnet)
library(skimr)
library(DataExplorer)
library(ggpubr)
library(mosaicData)
library(h2o)
library(recipes)
library(NeuralNetTools)
library(nnet)
library(kernlab)
library(ranger)
library(caretEnsemble)
library(tictoc)
library(readxl)
index_M5P <- createDataPartition(BD_modelo$precio, p = 0.7, list = FALSE)
data_trainM5P <- BD_modelo[index_M5P, ]
data_testM5P <- BD_modelo[-index_M5P, ]
#MODELO
modelo_M5P <- M5P(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_trainM5P)
summary(modelo_M5P)
#PRECIO $
pred_m5p <- predict(modelo_M5P, newdata = data_testM5P)
summary(pred_m5p)
#PRECIO LOG
pred_m5p1 <- predict(model_m5p1, newdata = data_testM5P1)
index_M5P1 <- createDataPartition(BD_modelo$Precio_log, p = 0.7, list = FALSE)
data_trainM5P1 <- BD_modelo[index_M5P1, ]
data_testM5P1 <- BD_modelo[-index_M5P1, ]
#MODELO
model_m5p1 <- M5P(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_trainM5P1)
#PRECIO $
pred_m5p <- predict(modelo_M5P, newdata = data_testM5P)
#PRECIO LOG
pred_m5p1 <- predict(model_m5p1, newdata = data_testM5P1)
rmseM5P <- sqrt(mean((data_testM5P$precio - pred_m5p)^2))
cat("RMSE:", rmse, "\n")
r2M5P <- cor(data_testM5P$precio, predicciones)^2
cat("R²:", r2M5P, "\n")
r2M5P <- cor(data_testM5P$precio, pred_m5p)^2
cat("R²:", r2M5P, "\n")
rmseM5P1 <- sqrt(mean((data_testM5P1$Precio_log - pred_m5p1)^2))
cat("RMSE:", rmse, "\n")
cat("RMSE:", rmseM5P1, "\n")
r2M5P1 <- cor(data_testM5P1$Precio_log, pred_m5p1)^2
cat("R²:", r2M5P1, "\n")
# Calcular el VIF
vif(pred_m5p1)
vif(pred_m5p)
#Precio $
plot(pred_m5p)  # Gráficos de diagnóstico
#Precio Log
plot(pred_m5p1)  # Gráficos de diagnóstico
#Precio $
plot(modelo_pred1)  # Gráficos de diagnóstico
#Precio Log
plot(modelo_pred2)  # Gráficos de diagnóstico
#Guardar Residuos
residuosM5P <- residuals(pred_m5p)
BD_RF <- BD_modelo
#Particion
index_RF <- createDataPartition(BD_RF$precio, p = 0.7, list = FALSE)
data_train_RF <- BD_RF[index_RF, ]  # 70% de los datos
data_test_RF <- BD_RF[-index_RF, ]  # 30% restantes
#Hiperparametros
modelLookup("rf")
#Validacion cruzada
ctrl <- trainControl(method = "repeatedcv",
number = 10, repeats =3)
grid_rf <- expand.grid(.mtry = c(2:20))
m_rf <- train(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train_RF, method = "rf",
metric = "RMSE", trControl = ctrl,
tuneGrid = grid_rf)
m_rf
plot(m_rf)
varImp(m_rf)
predRF<-predict(m_rf, newdata=data_test_RF)
RMSEtest_RF<-RMSE(predRF, data_test_RF$precio)
RMSEtest_RF
# Calcular el RMSE
rmse <- sqrt(mean((data_test_RF$precio - predRF)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test_RF$precio, predRF)^2
cat("R²:", r2, "\n")
library(ggplot2)
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
residuosRF <- data_test_RF$precio - predRF
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuosRF)
qqline(residuosRF, col = "red")
plot(predRF, residuosRF,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
shapiro.test(residuosRF)
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
#Particion
index_RF1 <- createDataPartition(BD_RF$Precio_log, p = 0.7, list = FALSE)
data_train_RF1 <- BD_RF[index_RF1, ]
data_test_R1F <- BD_RF[-index_RF1, ]
#Hiperparametro
modelLookup("rf")
ctrl1 <- trainControl(method = "repeatedcv",
number = 10, repeats =3)
grid_rf1 <- expand.grid(.mtry = c(2:20))
#Entrenamiento del modelo
m_rf1 <- train(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train_RF1, method = "rf",
metric = "RMSE", trControl = ctrl1,
tuneGrid = grid_rf1)
m_rf1
plot(m_rf1)
varImp(m_rf)
predRF1<-predict(m_rf1, newdata=data_test_R1F)
RMSEtest_RF1<-RMSE(predRF1, data_test_R1F$Precio_log)
RMSEtest_RF1
# Calcular el RMSE
rmse <- sqrt(mean((data_test_R1F$Precio_log - predRF1)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test_R1F$Precio_log, predRF1)^2
cat("R²:", r2, "\n")
library(ggplot2)
ggplot(data_test_R1F, aes(x = Precio_log, y = predRF1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
residuos <- data_test_R1F$Precio_log - predRF1
hist(residuos, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuos)
qqline(residuos, col = "red")
plot(predRF1, residuos,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuos, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
ggplot(data.frame(residuos), aes(x = residuos)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Curva de densidad de los errores", x = "Errores")
#Particion
index_RF <- createDataPartition(BD_RF$precio, p = 0.8, list = FALSE)
data_train_RF <- BD_RF[index_RF, ]
data_test_RF <- BD_RF[-index_RF, ]
#Hiperparametros
modelLookup("rf")
#Validacion cruzada
ctrl <- trainControl(method = "repeatedcv",
number = 10, repeats =3)
grid_rf <- expand.grid(.mtry = c(2:20))
#Entrenamiento del modelo
m_rf <- train(precio ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train_RF, method = "rf",
metric = "RMSE", trControl = ctrl,
tuneGrid = grid_rf)
m_rf
plot(m_rf)
#Importancia de variables
varImp(m_rf)
predRF<-predict(m_rf, newdata=data_test_RF)
RMSEtest_RF<-RMSE(predRF, data_test_RF$precio)
RMSEtest_RF
# Calcular el RMSE
rmse <- sqrt(mean((data_test_RF$precio - predRF)^2))
cat("RMSE:", rmse, "\n")
# Calcular el R²
r2 <- cor(data_test_RF$precio, predRF)^2
cat("R²:", r2, "\n")
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
residuosRF <- data_test_RF$precio - predRF
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuosRF)
qqline(residuosRF, col = "red")
plot(predRF, residuosRF,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
shapiro.test(residuosRF)
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
#Particion
index_RF1 <- createDataPartition(BD_RF$Precio_log, p = 0.7, list = FALSE)
data_train_RF1 <- BD_RF[index_RF1, ]
data_test_R1F <- BD_RF[-index_RF1, ]
#Hiperparametro
modelLookup("rf")
ctrl1 <- trainControl(method = "repeatedcv",
number = 10, repeats =3)
grid_rf1 <- expand.grid(.mtry = c(2:20))
#Entrenamiento del modelo
m_rf1 <- train(Precio_log ~ AREA_CONST + RECAMARAS + BANOS + Edad_inmue + Jardin + Cisterna + Seguridad + Alberca + Lavanderí + Terraza + Gimnasio + Cuarto.de + Chimenea + Aire.acond + Elevador + CPV_Prop_s + Distance + I_A + tipo_vivienda, data = data_train_RF1, method = "rf",
metric = "RMSE", trControl = ctrl1,
tuneGrid = grid_rf1)
m_rf1
plot(m_rf1)
varImp(m_rf)
predRF1<-predict(m_rf1, newdata=data_test_R1F)
RMSEtest_RF1<-RMSE(predRF1, data_test_R1F$Precio_log)
RMSEtest_RF1
# Calcular el RMSE
rmseRF1 <- sqrt(mean((data_test_R1F$Precio_log - predRF1)^2))
cat("RMSE:", rmseRF1, "\n")
# Calcular el R²
r2RF1 <- cor(data_test_R1F$Precio_log, predRF1)^2
cat("R²:", r2RF1, "\n")
ggplot(data_test_R1F, aes(x = Precio_log, y = predRF1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
residuosRF1 <- data_test_R1F$Precio_log - predRF1
hist(residuosRF1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuosRF1)
qqline(residuosRF1, col = "red")
plot(predRF1, residuosRF1,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuosRF1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
ggplot(data.frame(residuosRF1), aes(x = residuosRF1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Curva de densidad de los errores", x = "Errores")
residuosRF <- data_test_RF$precio - predRF
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuosRF)
qqline(residuosRF, col = "red")
plot(predRF, residuosRF,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
shapiro.test(residuosRF)
ggplot(data.frame(residuosRF1), aes(x = residuosRF1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Curva de densidad de los errores", x = "Errores")
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
m_rf
plot(m_rf)
#Importancia de variables
varImp(m_rf)
predRF<-predict(m_rf, newdata=data_test_RF)
RMSEtest_RF<-RMSE(predRF, data_test_RF$precio)
RMSEtest_RF
# Calcular el RMSE
rmseRF <- sqrt(mean((data_test_RF$precio - predRF)^2))
cat("RMSE:", rmseRF, "\n")
# Calcular el R²
r2RF <- cor(data_test_RF$precio, predRF)^2
cat("R²:", r2RF, "\n")
residuosRF <- data_test_RF$precio - predRF
qqnorm(residuosRF)
qqline(residuosRF, col = "red")
plot(predRF, residuosRF,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuosRF, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
shapiro.test(residuosRF)
ggplot(data.frame(residuosRF1), aes(x = residuosRF1)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Curva de densidad de los errores", x = "Errores")
ggplot(data_test_RF, aes(x = precio, y = predRF)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicciones vs Valores Reales",
x = "Valores Reales",
y = "Predicciones") +
theme_minimal()
#Particion
index_RF1 <- createDataPartition(BD_RF$Precio_log, p = 0.8, list = FALSE)
hist(residuosRF1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
qqnorm(residuosRF1)
qqline(residuosRF1, col = "red")
plot(predRF1, residuosRF1,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
qqnorm(residuosRF1)
qqline(residuosRF1, col = "red")
qqnorm(residuosRF1)
qqnorm(residuosRF1)
qqnorm(residuosRF1)
qqline(residuosRF1, col = "red")
plot(predRF1, residuosRF1,
main = "Residuos vs Predicciones",
xlab = "Valores Predichos",
ylab = "Residuos",
pch = 20)
abline(h = 0, col = "red")
hist(residuosRF1, breaks = 20, main = "Histograma de los residuos", xlab = "Residuos", col = "blue")
